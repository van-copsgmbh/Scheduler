<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Quartz.Extensions.DependencyInjection</name>
    </assembly>
    <members>
        <member name="T:Quartz.ContainerConfigurationProcessor">
            <summary>
            Reuse logic for adding and removing items by using XMLSchedulingDataProcessor.
            </summary>
        </member>
        <member name="P:Quartz.IServiceCollectionQuartzConfigurator.SchedulerId">
            <inheritdoc cref="P:Quartz.SchedulerBuilder.SchedulerId"/>
        </member>
        <member name="P:Quartz.IServiceCollectionQuartzConfigurator.SchedulerName">
            <inheritdoc cref="P:Quartz.SchedulerBuilder.SchedulerName"/>
        </member>
        <member name="P:Quartz.IServiceCollectionQuartzConfigurator.MisfireThreshold">
            <inheritdoc cref="P:Quartz.SchedulerBuilder.MisfireThreshold"/>
        </member>
        <member name="P:Quartz.IServiceCollectionQuartzConfigurator.InterruptJobsOnShutdown">
            <inheritdoc cref="P:Quartz.SchedulerBuilder.InterruptJobsOnShutdown"/>
        </member>
        <member name="P:Quartz.IServiceCollectionQuartzConfigurator.InterruptJobsOnShutdownWithWait">
            <inheritdoc cref="P:Quartz.SchedulerBuilder.InterruptJobsOnShutdownWithWait"/>
        </member>
        <member name="P:Quartz.IServiceCollectionQuartzConfigurator.MaxBatchSize">
            <inheritdoc cref="P:Quartz.SchedulerBuilder.MaxBatchSize"/>
        </member>
        <member name="P:Quartz.IServiceCollectionQuartzConfigurator.BatchTriggerAcquisitionFireAheadTimeWindow">
            <inheritdoc cref="P:Quartz.SchedulerBuilder.BatchTriggerAcquisitionFireAheadTimeWindow"/>
        </member>
        <member name="P:Quartz.IServiceCollectionQuartzConfigurator.CheckConfiguration">
            <inheritdoc cref="P:Quartz.SchedulerBuilder.CheckConfiguration"/>
        </member>
        <member name="M:Quartz.IServiceCollectionQuartzConfigurator.UseJobFactory``1(System.Action{Quartz.JobFactoryOptions})">
            <summary>
            Configure custom job factory.
            </summary>
        </member>
        <member name="M:Quartz.IServiceCollectionQuartzConfigurator.UseMicrosoftDependencyInjectionJobFactory(System.Action{Quartz.JobFactoryOptions})">
            <summary>
            Use <see cref="T:Quartz.Simpl.MicrosoftDependencyInjectionJobFactory"/> to produce Quartz jobs.
            </summary>
        </member>
        <member name="M:Quartz.ITriggerConfigurator.WithIdentity(System.String)">
            <summary>
            Use a <see cref="T:Quartz.TriggerKey" /> with the given name and default group to
            identify the Trigger.
            </summary>
            <remarks>
            <para>If none of the 'withIdentity' methods are set on the TriggerBuilder,
            then a random, unique TriggerKey will be generated.</para>
            </remarks>
            <param name="name">the name element for the Trigger's TriggerKey</param>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="T:Quartz.TriggerKey" />
            <seealso cref="P:Quartz.ITrigger.Key" />
        </member>
        <member name="M:Quartz.ITriggerConfigurator.WithIdentity(System.String,System.String)">
            <summary>
            Use a TriggerKey with the given name and group to
            identify the Trigger.
            </summary>
            <remarks>
            <para>If none of the 'withIdentity' methods are set on the TriggerBuilder,
            then a random, unique TriggerKey will be generated.</para>
            </remarks>
            <param name="name">the name element for the Trigger's TriggerKey</param>
            <param name="group">the group element for the Trigger's TriggerKey</param>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="T:Quartz.TriggerKey" />
            <seealso cref="P:Quartz.ITrigger.Key" />
        </member>
        <member name="M:Quartz.ITriggerConfigurator.WithIdentity(Quartz.TriggerKey)">
            <summary>
            Use the given TriggerKey to identify the Trigger.
            </summary>
            <remarks>
            <para>If none of the 'withIdentity' methods are set on the TriggerBuilder,
            then a random, unique TriggerKey will be generated.</para>
            </remarks>
            <param name="key">the TriggerKey for the Trigger to be built</param>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="T:Quartz.TriggerKey" />
            <seealso cref="P:Quartz.ITrigger.Key" />
        </member>
        <member name="M:Quartz.ITriggerConfigurator.WithDescription(System.String)">
            <summary>
            Set the given (human-meaningful) description of the Trigger.
            </summary>
            <remarks>
            </remarks>
            <param name="description">the description for the Trigger</param>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.Description" />
        </member>
        <member name="M:Quartz.ITriggerConfigurator.WithPriority(System.Int32)">
            <summary>
            Set the Trigger's priority.  When more than one Trigger have the same
            fire time, the scheduler will fire the one with the highest priority
            first.
            </summary>
            <remarks>
            </remarks>
            <param name="priority">the priority for the Trigger</param>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="F:Quartz.TriggerConstants.DefaultPriority" />
            <seealso cref="P:Quartz.ITrigger.Priority" />
        </member>
        <member name="M:Quartz.ITriggerConfigurator.ModifiedByCalendar(System.String)">
            <summary>
            Set the name of the <see cref="T:Quartz.ICalendar" /> that should be applied to this
            Trigger's schedule.
            </summary>
            <remarks>
            </remarks>
            <param name="calendarName">the name of the Calendar to reference.</param>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="T:Quartz.ICalendar" />
            <seealso cref="P:Quartz.ITrigger.CalendarName" />
        </member>
        <member name="M:Quartz.ITriggerConfigurator.StartAt(System.DateTimeOffset)">
            <summary>
            Set the time the Trigger should start at - the trigger may or may
            not fire at this time - depending upon the schedule configured for
            the Trigger.  However the Trigger will NOT fire before this time,
            regardless of the Trigger's schedule.
            </summary>
            <remarks>
            </remarks>
            <param name="startTimeUtc">the start time for the Trigger.</param>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.StartTimeUtc" />
            <seealso cref="T:Quartz.DateBuilder" />
        </member>
        <member name="M:Quartz.ITriggerConfigurator.StartNow">
            <summary>
            Set the time the Trigger should start at to the current moment -
            the trigger may or may not fire at this time - depending upon the
            schedule configured for the Trigger.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.StartTimeUtc" />
        </member>
        <member name="M:Quartz.ITriggerConfigurator.EndAt(System.Nullable{System.DateTimeOffset})">
            <summary>
            Set the time at which the Trigger will no longer fire - even if it's
            schedule has remaining repeats.
            </summary>
            <remarks>
            </remarks>
            <param name="endTimeUtc">the end time for the Trigger.  If null, the end time is indefinite.</param>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.EndTimeUtc" />
            <seealso cref="T:Quartz.DateBuilder" />
        </member>
        <member name="M:Quartz.ITriggerConfigurator.WithSchedule(Quartz.IScheduleBuilder)">
            <summary>
            Set the <see cref="T:Quartz.IScheduleBuilder" /> that will be used to define the
            Trigger's schedule.
            </summary>
            <remarks>
            <para>The particular <see cref="T:Quartz.IScheduleBuilder" /> used will dictate
            the concrete type of Trigger that is produced by the TriggerBuilder.</para>
            </remarks>
            <param name="scheduleBuilder">the SchedulerBuilder to use.</param>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="T:Quartz.IScheduleBuilder" />
            <seealso cref="T:Quartz.SimpleScheduleBuilder" />
            <seealso cref="T:Quartz.CronScheduleBuilder" />
            <seealso cref="T:Quartz.CalendarIntervalScheduleBuilder" />
        </member>
        <member name="M:Quartz.ITriggerConfigurator.ForJob(Quartz.JobKey)">
            <summary>
            Set the identity of the Job which should be fired by the produced
            Trigger.
            </summary>
            <remarks>
            </remarks>
            <param name="jobKey">the identity of the Job to fire.</param>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.JobKey" />
        </member>
        <member name="M:Quartz.ITriggerConfigurator.ForJob(System.String)">
            <summary>
            Set the identity of the Job which should be fired by the produced
            Trigger - a <see cref="T:Quartz.JobKey" /> will be produced with the given
            name and default group.
            </summary>
            <remarks>
            </remarks>
            <param name="jobName">the name of the job (in default group) to fire.</param>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.JobKey" />
        </member>
        <member name="M:Quartz.ITriggerConfigurator.ForJob(System.String,System.String)">
            <summary>
            Set the identity of the Job which should be fired by the produced
            Trigger - a <see cref="T:Quartz.JobKey" /> will be produced with the given
            name and group.
            </summary>
            <remarks>
            </remarks>
            <param name="jobName">the name of the job to fire.</param>
            <param name="jobGroup">the group of the job to fire.</param>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.JobKey" />
        </member>
        <member name="M:Quartz.ITriggerConfigurator.ForJob(Quartz.IJobDetail)">
            <summary>
            Set the identity of the Job which should be fired by the produced
            Trigger, by extracting the JobKey from the given job.
            </summary>
            <remarks>
            </remarks>
            <param name="jobDetail">the Job to fire.</param>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.JobKey" />
        </member>
        <member name="M:Quartz.ITriggerConfigurator.UsingJobData(Quartz.JobDataMap)">
            <summary>
            Add the given key-value pair to the Trigger's <see cref="T:Quartz.JobDataMap" />.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.JobDataMap" />
        </member>
        <member name="M:Quartz.ITriggerConfigurator.UsingJobData(System.String,System.String)">
            <summary>
            Add the given key-value pair to the Trigger's <see cref="T:Quartz.JobDataMap" />.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.JobDataMap" />
        </member>
        <member name="M:Quartz.ITriggerConfigurator.UsingJobData(System.String,System.Int32)">
            <summary>
            Add the given key-value pair to the Trigger's <see cref="T:Quartz.JobDataMap" />.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.JobDataMap" />
        </member>
        <member name="M:Quartz.ITriggerConfigurator.UsingJobData(System.String,System.Int64)">
            <summary>
            Add the given key-value pair to the Trigger's <see cref="T:Quartz.JobDataMap" />.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.JobDataMap" />
        </member>
        <member name="M:Quartz.ITriggerConfigurator.UsingJobData(System.String,System.Single)">
            <summary>
            Add the given key-value pair to the Trigger's <see cref="T:Quartz.JobDataMap" />.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.JobDataMap" />
        </member>
        <member name="M:Quartz.ITriggerConfigurator.UsingJobData(System.String,System.Double)">
            <summary>
            Add the given key-value pair to the Trigger's <see cref="T:Quartz.JobDataMap" />.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.JobDataMap" />
        </member>
        <member name="M:Quartz.ITriggerConfigurator.UsingJobData(System.String,System.Decimal)">
            <summary>
            Add the given key-value pair to the Trigger's <see cref="T:Quartz.JobDataMap" />.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.JobDataMap" />
        </member>
        <member name="M:Quartz.ITriggerConfigurator.UsingJobData(System.String,System.Boolean)">
            <summary>
            Add the given key-value pair to the Trigger's <see cref="T:Quartz.JobDataMap" />.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.JobDataMap" />
        </member>
        <member name="M:Quartz.ITriggerConfigurator.UsingJobData(System.String,System.Guid)">
            <summary>
            Add the given key-value pair to the Trigger's <see cref="T:Quartz.JobDataMap" />.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.JobDataMap" />
        </member>
        <member name="M:Quartz.ITriggerConfigurator.UsingJobData(System.String,System.Char)">
            <summary>
            Add the given key-value pair to the Trigger's <see cref="T:Quartz.JobDataMap" />.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.JobDataMap" />
        </member>
        <member name="P:Quartz.JobFactoryOptions.AllowDefaultConstructor">
            <summary>
            When DI has not been configured with the job type, should the default no-arg public constructor be tried.
            </summary>
        </member>
        <member name="P:Quartz.JobFactoryOptions.CreateScope">
            <summary>
            Whether to use scopes when building job instances, enables injection of scoped services like
            Entity Framework's DbContext.
            </summary>
        </member>
        <member name="T:Quartz.QuartzConfiguration">
            <summary>
            This class is responsible for ensuring that configuration is valid.
            </summary>
        </member>
        <member name="P:Quartz.SchedulingOptions.OverWriteExistingData">
            <summary>
            Whether the existing scheduling data (with same identifiers) will be
            overwritten.
            </summary>
            <remarks>
            If false, and <see cref="P:Quartz.SchedulingOptions.IgnoreDuplicates" /> is not false, and jobs or
            triggers with the same names already exist as those in the file, an
            error will occur.
            </remarks>
            <seealso cref="P:Quartz.SchedulingOptions.IgnoreDuplicates" />
        </member>
        <member name="P:Quartz.SchedulingOptions.IgnoreDuplicates">
            <summary>
            If true (and <see cref="P:Quartz.SchedulingOptions.OverWriteExistingData" /> is false) then any
            job/triggers encountered in this file that have names that already exist
            in the scheduler will be ignored, and no error will be produced.
            </summary>
            <seealso cref="P:Quartz.SchedulingOptions.OverWriteExistingData"/>
        </member>
        <member name="P:Quartz.SchedulingOptions.ScheduleTriggerRelativeToReplacedTrigger">
            <summary>
            If true (and <see cref="P:Quartz.SchedulingOptions.OverWriteExistingData" /> is true) then any
            job/triggers encountered in this file that already exist is scheduler
            will be updated with start time relative to old trigger. Effectively
            new trigger's last fire time will be updated to old trigger's last fire time
            and trigger's next fire time will updated to be next from this last fire time.
            </summary>
        </member>
        <member name="M:Quartz.ServiceCollectionExtensions.AddQuartz(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Quartz.IServiceCollectionQuartzConfigurator})">
            <summary>
            Configures Quartz services to underlying service collection. This API maybe change!
            </summary>
        </member>
        <member name="M:Quartz.ServiceCollectionExtensions.AddQuartz(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Specialized.NameValueCollection,System.Action{Quartz.IServiceCollectionQuartzConfigurator})">
            <summary>
            Configures Quartz services to underlying service collection. This API maybe change!
            </summary>
        </member>
        <member name="M:Quartz.ServiceCollectionExtensions.AddJob``1(Quartz.IServiceCollectionQuartzConfigurator,System.Action{Quartz.IJobConfigurator})">
            <summary>
            Add job to underlying service collection. This API maybe change!
            </summary>
        </member>
        <member name="M:Quartz.ServiceCollectionExtensions.AddJob``1(Quartz.IServiceCollectionQuartzConfigurator,Quartz.JobKey,System.Action{Quartz.IJobConfigurator})">
            <summary>
            Add job to underlying service collection. This API maybe change!
            </summary>
        </member>
        <member name="M:Quartz.ServiceCollectionExtensions.AddJob(Quartz.IServiceCollectionQuartzConfigurator,System.Type,Quartz.JobKey,System.Action{Quartz.IJobConfigurator})">
            <summary>
            Add job to underlying service collection.jobType shoud be implement `IJob`
            </summary>
        </member>
        <member name="M:Quartz.ServiceCollectionExtensions.AddTrigger(Quartz.IServiceCollectionQuartzConfigurator,System.Action{Quartz.ITriggerConfigurator})">
            <summary>
            Add trigger to underlying service collection. This API maybe change!
            </summary>
        </member>
        <member name="M:Quartz.ServiceCollectionExtensions.ScheduleJob``1(Quartz.IServiceCollectionQuartzConfigurator,System.Action{Quartz.ITriggerConfigurator},System.Action{Quartz.IJobConfigurator})">
            <summary>
            Schedule job with trigger to underlying service collection. This API maybe change!
            </summary>
        </member>
        <member name="T:Quartz.ServiceCollectionSchedulerFactory">
            <summary>
            Wrapper to initialize registered jobs.
            </summary>
        </member>
        <member name="T:Quartz.Simpl.MicrosoftDependencyInjectionJobFactory">
            <summary>
            Integrates job instantiation with Microsoft DI system.
            </summary>
        </member>
        <member name="M:Quartz.TriggerExtensions.WithDailyTimeIntervalSchedule(Quartz.ITriggerConfigurator,System.Int32,Quartz.IntervalUnit,System.Action{Quartz.DailyTimeIntervalScheduleBuilder})">
            <summary>
            Sets up a trigger schedule for one or more occurrences every day.
            </summary>
            <remarks>
            You need to configure the interval for when the trigger fires the job. If you only want one execution per day,
            call EndingDailyAfterCount(1) or set the interval accordingly.
            </remarks>
            <param name="triggerBuilder"></param>
            <param name="interval">The interval count to configure on the builder initially , e.g. 12*hours</param>
            <param name="intervalUnit">The unit for the defaultInterval count.</param>
            <param name="action">Ability to further configure the scheduling.</param>
            <seealso cref="M:Quartz.DailyTimeIntervalScheduleBuilder.EndingDailyAfterCount(System.Int32)"/>
            <seealso cref="M:Quartz.DailyTimeIntervalScheduleBuilder.EndingDailyAt(Quartz.TimeOfDay)"/>
            <seealso cref="M:Quartz.TriggerExtensions.WithCronSchedule(Quartz.ITriggerConfigurator,System.String,System.Action{Quartz.CronScheduleBuilder})"/>
            <returns>Mutated trigger configurator</returns>
        </member>
    </members>
</doc>
